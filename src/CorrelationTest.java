
// Generated by CodiumAI



import org.junit.Test;
import static org.junit.Assert.*;

public class CorrelationTest {


    // The method returns the correct correlation coefficient for two input arrays of equal length with positive values.
    @Test
    public void test_positive_values() {
        int[] data = {1, 2, 3, 4, 5};
        int[] data2 = {2, 4, 6, 8, 10};
        double expected = 1.0;
        double result = PearsonsCorrelation.correlation(data, data2);
        assertEquals(expected, result, 0.0001);
    }

    // The method returns the correct correlation coefficient for two input arrays of equal length with negative values.
    @Test
    public void test_negative_values() {
        int[] data = {-1, -2, -3, -4, -5};
        int[] data2 = {-2, -4, -6, -8, -10};
        double expected = 1.0;
        double result = PearsonsCorrelation.correlation(data, data2);
        assertEquals(expected, result, 0.0001);
    }

    // The method returns the correct correlation coefficient for two input arrays of equal length with mixed positive and negative values.
    @Test
    public void test_mixed_values() {
        int[] data = {-1, 2, -3, 4, -5};
        int[] data2 = {2, -4, 6, -8, 10};
        double expected = -0.5;
        double result = PearsonsCorrelation.correlation(data, data2);
        assertEquals(expected, result, 0.0001);
    }

    // The method returns 0 for two input arrays of equal length with no correlation.
    @Test
    public void test_no_correlation() {
        int[] data = {1, 2, 3, 4, 5};
        int[] data2 = {5, 4, 3, 2, 1};
        double expected = 0.0;
        double result = PearsonsCorrelation.correlation(data, data2);
        assertEquals(expected, result, 0.0001);
    }

    // The method throws an IllegalArgumentException if the input arrays have different lengths.
    @Test(expected = IllegalArgumentException.class)
    public void test_different_lengths() {
        int[] data = {1, 2, 3};
        int[] data2 = {4, 5};
        PearsonsCorrelation.correlation(data, data2);
    }

    // The method returns NaN if one or both input arrays contain NaN values.
    @Test
    public void test_nan_values() {
        int[] data = {1, 2, 3};
        int[] data2 = {4, 5, Integer.parseInt("NaN")};
        double result = PearsonsCorrelation.correlation(data, data2);
        assertTrue(Double.isNaN(result));
    }

    // The method returns NaN if one or both input arrays contain infinite values.
    @Test
    public void test_infinite_values() {
        int[] data = {1, 2, 3};
        int[] data2 = {4, 5, Integer.parseInt("Infinity")};
        double result = PearsonsCorrelation.correlation(data, data2);
        assertTrue(Double.isNaN(result));
    }

    // The method returns NaN if both input arrays have the same value for every element.
    @Test
    public void test_same_values() {
        int[] data = {1, 1, 1};
        int[] data2 = {2, 2, 2};
        double result = PearsonsCorrelation.correlation(data, data2);
        assertTrue(Double.isNaN(result));
    }

}